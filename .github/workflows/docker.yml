---
name: Test,Build

permissions:
  contents: read
  checks: write
  id-token: write

on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4
      - name: Setup | Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Build | Lint | Test
        run: |
          cargo clippy
          cargo test

  security-audit:
    name: security-audit
    runs-on: ubuntu-latest
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4
      - name: Setup | Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Build | Compile
        run: |
          cargo install cargo-audit
          cargo audit

  push_to_registry:
    name: Push Docker image to Docker Hub
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    timeout-minutes: 180
    needs: [test]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: t1mon1106/scheduler

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }},t1mon1106/scheduler:latest
          labels: ${{ steps.meta.outputs.labels }}

  e2e:
    name: e2e tests
    runs-on: ubuntu-latest
    needs: [push_to_registry]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: run-compose with tests
        uses: isbang/compose-action@v1.5.1
        with:
          compose-file: "docker-compose-e2e.yml"
          up-flags: "--abort-on-container-exit"
        env:
          TAG: ${{ github.ref_name }}
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "**/tests/e2e/report/*.xml"

  smoke-performance:
    name: smoke-performance
    runs-on: ubuntu-latest
    needs: [push_to_registry]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: run docker-compose
        env:
          TAG: ${{ github.ref_name }}
          POSTGRES_DB: "schedulerdb"
          POSTGRES_USER: "scheduler"
          POSTGRES_PASSWORD: "scheduler"
        run: docker-compose -f docker-compose-perf.yml up -d
      - name: run-compose with tests
        env:
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose-perf.yml run k6s run /scripts/perf_test.js --quiet

  one-handredk-rows-test:
    name: one-handredk-rows-test
    runs-on: ubuntu-latest
    needs: [push_to_registry]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: run empty db test
        env:
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose-perf-no100k.yml run k6s run /scripts/get_activities.js --quiet
      - name: tear down
        env:
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose-perf-no100k.yml down -v

      - name: run 100_000 rows test
        env:
          POSTGRES_DB: "schedulerdb"
          POSTGRES_USER: "scheduler"
          POSTGRES_PASSWORD: "scheduler"
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose-perf.yml up -d
      - name: run-compose with tests
        env:
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose-perf.yml run k6s run /scripts/get_activities.js --quiet

  api-security-check:
    name: api-security-check
    runs-on: ubuntu-latest
    needs: [push_to_registry]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Start target
        env:
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose.yml up -d

      - name: install deps
        run: pip install wapiti3

      - name: run scanner
        run: wapiti -u http://localhost:8080 -o report

      - name: store report
        uses: actions/upload-artifact@v4
        with:
          name: wapiti-report
          path: report/*
