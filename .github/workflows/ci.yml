---
name: Test,Build,e2e

permissions:
  contents: read
  checks: write
  id-token: write

on: [push]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Setup Checkout
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Test
        run: |
          cargo clippy
          cargo +stable install cargo-llvm-cov --locked
          cargo llvm-cov --lcov --output-path lcov.info
      - name: Coverage report
        uses: terencetcf/github-actions-lcov-minimum-coverage-checker@v1
        with:
          coverage-file: lcov.info
          minimum-coverage: 60

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Setup Checkout
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Lint
        run: |
          cargo clippy

  security-audit:
    name: security-audit
    runs-on: ubuntu-latest
    steps:
      - name: Setup Checkout
        uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Build Audit
        run: |
          cargo install cargo-audit
          cargo audit

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    timeout-minutes: 180
    needs: [test]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: t1mon1106/scheduler

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }},t1mon1106/scheduler:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan for vulnerabilities
        uses: crazy-max/ghaction-container-scan@v3
        with:
          image: ${{ steps.meta.outputs.tags }}
          annotations: true

  large-tests:
    name: large tests
    runs-on: ubuntu-latest
    needs: [push_to_registry]

    services:
      postgres:
        image: postgres:16.2-alpine3.18
        env:
          POSTGRES_DB: "schedulerdb"
          POSTGRES_USER: "scheduler"
          POSTGRES_PASSWORD: "scheduler"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      backend:
        image: t1mon1106/scheduler:${{ github.ref_name }}
        ports:
          - 8080:8080
        env:
          RUST_LOG: info
          PASETO_KEY: "RANDOM WORDS WINTER MACINTOSH PC"
          PORT: 8080
          DATABASE_PASSWORD: scheduler
          DATABASE_USER: scheduler
          DATABASE_PORT: 5432
          DATABASE_DB: schedulerdb
          DATABASE_HOST: postgres

      http-to-sql:
        image: t1mon1106/http_to_sql
        ports:
          - "4545:4545"
        env:
          DB_USER: scheduler
          DB_PASSWORD: scheduler
          DB_HOST: postgres
          DB_PORT: 5432
          DB_NAME: schedulerdb

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: prepare hurl
        run: |
          VERSION=6.1.1
          sudo apt-get update
          sudo apt install software-properties-common -y
          sudo apt-add-repository -y ppa:lepapareil/hurl
          sudo apt install hurl="${VERSION}"*

      - name: run test script
        run: |
          cd ./tests/e2e
          ./test_runner.sh -f . -x -u "http://localhost:8080" -v

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: "**/tests/e2e/report.xml"

  one-handredk-rows-test:
    name: one-handredk-rows-test
    runs-on: ubuntu-latest
    needs: [push_to_registry]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: prepare compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: run empty db test
        env:
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose-perf-no100k.yml run k6s run /scripts/get_activities.js --quiet

      - name: tear down
        env:
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose-perf-no100k.yml down -v

      - name: run 100_000 rows test
        env:
          POSTGRES_DB: "schedulerdb"
          POSTGRES_USER: "scheduler"
          POSTGRES_PASSWORD: "scheduler"
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose-perf.yml up -d

      - name: run-compose with tests
        env:
          TAG: ${{ github.ref_name }}
        run: docker-compose -f docker-compose-perf.yml run k6s run /scripts/get_activities.js --quiet

  api-security-check:
    name: api-security-check
    runs-on: ubuntu-latest
    # needs: [push_to_registry]
    services:
      postgres:
        image: postgres:16.2-alpine3.18
        env:
          POSTGRES_DB: "schedulerdb"
          POSTGRES_USER: "scheduler"
          POSTGRES_PASSWORD: "scheduler"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      backend:
        image: t1mon1106/scheduler:${{ github.ref_name }}
        ports:
          - 8080:8080
        env:
          RUST_LOG: info
          PASETO_KEY: "RANDOM WORDS WINTER MACINTOSH PC"
          PORT: 8080
          DATABASE_PASSWORD: scheduler
          DATABASE_USER: scheduler
          DATABASE_PORT: 5432
          DATABASE_DB: schedulerdb
          DATABASE_HOST: postgres

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: ZAP Scan
        uses: zaproxy/action-api-scan@v0.9.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          format: openapi
          target: 'http://localhost:8080/api-doc.json'
          cmd_options: '-a'
          allow_issue_writing: false

      - name: store report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_html.html
